name: CI/CD Release

env:
  IMAGE_REGISTRY: ${{ secrets.IMAGE_REGISTRY }}/${{ secrets.IMAGE_REGISTRY_USER }}
  IMAGE_REGISTRY_USER: ${{ secrets.IMAGE_REGISTRY_USER }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}

  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: "ivan-jimeno-ramirez1-dev"

  ROUTE_NAME: "helloworld"

  APP_NAME: ""

on:
  push:
    branches:
      - main

jobs:

  build-tests-sonar:
    name: Build - Tests - Sonar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and tests
        run: |
          mvn clean verify
      - name: Sonar
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/jacoco-report/jacoco.xml \
          -Dsonar.projectKey=Salle-models-de-desenvolupament_mdas-ci-cd-hello-world
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: target
          path: ./target/*
 
  security:
    name: Security (SNYK)
    runs-on: ubuntu-latest
    if: false
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  versioning:
    name: Semantic Release versioning
    if: false
    permissions:
      contents: write
      issues: write
      pull-requests: write
    needs: [build-tests-sonar, security]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: npm clean-install
      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures
      - name: Obtain version
        id: get_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export VERSION=$(npx semantic-release --dry-run | grep 'The next release version is' | sed -E 's/.* ([[:digit:].]+)$/\1/')
          if [ -z "$VERSION" ]; then
            echo "Failed to determine version" >&2
            exit 1
          fi
          echo "version=${VERSION}-${GITHUB_SHA::12}" >> $GITHUB_OUTPUT
      - name: Perform release
        id: perform_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
      - name: view generated version
        run: echo "version=${{ steps.get_version.outputs.version }}"
  
  artifact:
    name: Artifact
    runs-on: ubuntu-latest
    needs: [build-tests-sonar]
    outputs:
      version: ${{ needs.versioning.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: target
      - run: ls

      - name: Debug downloaded artifact
        run: ls -R target

      - name: Determine app name
        if: env.APP_NAME == ''
        run: |
          echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

      - name: Build from Dockerfile
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.APP_NAME }}
          tags: ${{ needs.versioning.outputs.version }} latest

          dockerfiles: |
            ./src/main/docker/Dockerfile.jvm

      - name: Push to registry
        id: push-image
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.IMAGE_REGISTRY_USER }}
          password: ${{ env.IMAGE_REGISTRY_PASSWORD }}
      
  openshift-ci-cd:
    name: Deploy to OpenShift (Blue-Green)
    runs-on: ubuntu-latest
    environment: production
    needs: [artifact]

    steps:
      - name: Check for required secrets
        uses: actions/github-script@v6
        with:
          script: |
            const secrets = {
              OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
              OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
            };

            const GHCR = "ghcr.io";
            if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
              core.info(`Image registry is ${GHCR} - no registry password required`);
            }
            else {
              core.info("A registry password is required");
              secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
            }

            const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
              if (value.length === 0) {
                core.error(`Secret "${name}" is not set`);
                return true;
              }
              core.info(`✔️ Secret "${name}" is set`);
              return false;
            });

            if (missingSecrets.length > 0) {
              core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
                "You can add it using:\n" +
                "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
                "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
                "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
            }
            else {
              core.info(`✅ All the required secrets are set`);
            }

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Blue-Green Deployment
        run: |
          ROUTE_DEST=$(oc get route ${{ env.ROUTE_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} \
            -o jsonpath="{.spec.to.name}" --ignore-not-found)

          echo "Current route: '${ROUTE_DEST}' (empty if not found)"

          if [ -z "$ROUTE_DEST" ]; then
            echo "The Route ${{ env.ROUTE_NAME }} DOES NOT exist. Deploying BLUE"
            oc delete deployment,service,route -l app=${{ env.APP_NAME }}-blue \
              -n ${{ env.OPENSHIFT_NAMESPACE }} --ignore-not-found=true

            oc new-app ${{ env.IMAGE_REGISTRY }}/${{ env.APP_NAME }}:${{ needs.artifact.outputs.version }} \
              --name=${{ env.APP_NAME }}-blue \
              -n ${{ env.OPENSHIFT_NAMESPACE }}

            oc rollout status deployment/${{ env.APP_NAME }}-blue -n ${{ env.OPENSHIFT_NAMESPACE }}

            oc expose service ${{ env.APP_NAME }}-blue --name=${{ env.ROUTE_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }}

          else
            if [ "$ROUTE_DEST" = "${{ env.APP_NAME }}-blue" ]; then
              echo "The Route points to BLUE. Deploying GREEN."
              oc delete deployment,service -l app=${{ env.APP_NAME }}-green \
                -n ${{ env.OPENSHIFT_NAMESPACE }} --ignore-not-found=true

              oc new-app ${{ env.IMAGE_REGISTRY }}/${{ env.APP_NAME }}:${{ needs.artifact.outputs.version }} \
                --name=${{ env.APP_NAME }}-green \
                -n ${{ env.OPENSHIFT_NAMESPACE }}

              oc rollout status deployment/${{ env.APP_NAME }}-green -n ${{ env.OPENSHIFT_NAMESPACE }}

              oc patch route/${{ env.ROUTE_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} \
                -p "{\"spec\":{\"to\":{\"name\":\"${{ env.APP_NAME }}-green\"}}}"

            else
              echo "The Route points to GREEN. Deploying BLUE."
              oc delete deployment,service -l app=${{ env.APP_NAME }}-blue \
                -n ${{ env.OPENSHIFT_NAMESPACE }} --ignore-not-found=true

              oc new-app ${{ env.IMAGE_REGISTRY }}/${{ env.APP_NAME }}:${{ needs.artifact.outputs.version }} \
                --name=${{ env.APP_NAME }}-blue \
                -n ${{ env.OPENSHIFT_NAMESPACE }}

              oc rollout status deployment/${{ env.APP_NAME }}-blue -n ${{ env.OPENSHIFT_NAMESPACE }}

              oc patch route/${{ env.ROUTE_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} \
                -p "{\"spec\":{\"to\":{\"name\":\"${{ env.APP_NAME }}-blue\"}}}"
            fi
          fi