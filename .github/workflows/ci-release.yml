name: CI Release

env:
  IMAGE_REGISTRY: ${{ secrets.IMAGE_REGISTRY }}/${{ secrets.IMAGE_REGISTRY_USER }}
  IMAGE_REGISTRY_USER: ${{ secrets.QUAY_USER }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}

  APP_NAME: ""
  IMAGE_TAGS: ""

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build
        run: mvn clean install
  
  unit-tests-sonar:
    name: Unit tests & Sonar
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run tests
        run: mvn clean test -Pcoverage
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: SonarCloud Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Salle-models-de-desenvolupament_mdas-ci-cd-hello-world -Dsonar.coverage.jacoco.xmlReportPaths=target/jacoco-report/jacoco.xml
  
  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: unit-tests-sonar
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run tests
        run: mvn clean verify
  
  versioning:
    name: Semantic Release versioning
    permissions:
      contents: write
      issues: write
      pull-requests: write
    needs: [integration-tests]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: npm clean-install
      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures
      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
      - name: Capturar versiÃ³n generada
        id: set-version
        run: |
          VERSION=$(cat .version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
  
  artifact:
    name: Artifact
    runs-on: ubuntu-latest
    needs: [integration-tests, versioning]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Determine app name
        if: env.APP_NAME == ''
        run: |
          echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV
      - name: Determine image tags
        if: env.IMAGE_TAGS == ''
        run: |
          SEMVER_TAG=${{ needs.versioning.outputs.version }}
          echo "IMAGE_TAGS=$SEMVER_TAG $SEMVER_TAG-${GITHUB_SHA::12}" | tee -a $GITHUB_ENV
          echo "DEPLOY_IMAGE_TAG=$SEMVER_TAG-${GITHUB_SHA::12}" | tee -a $GITHUB_ENV
      - name: Build from Dockerfile
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.APP_NAME }}
          tags: ${{ env.IMAGE_TAGS }}

          dockerfiles: |
            ./src/main/docker/Dockerfile.jvm

      - name: Push to registry
        id: push-image
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.IMAGE_REGISTRY_USER }}
          password: ${{ env.IMAGE_REGISTRY_PASSWORD }}
      